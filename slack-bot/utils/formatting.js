/**
 * Slack Block Kit Response Formatter
 * Formats AI-generated publisher summaries for Slack display
 */

/**
 * Format the main publisher summary response for Slack
 */
function formatSlackResponse(publisher, summary, searchResults, days) {
  const blocks = [
    // Header
    {
      type: 'header',
      text: {
        type: 'plain_text',
        text: `üìä ${publisher} Account Summary`
      }
    },
    
    // Timeframe and stats
    {
      type: 'section',
      text: {
        type: 'mrkdwn',
        text: `*Timeframe:* Last ${days} days\n*Sources analyzed:* ${searchResults.length} documents\n*Generated:* ${new Date().toLocaleString()}`
      }
    }
  ];

  // Add summary content blocks
  if (summary.keyHighlights && summary.keyHighlights.length > 0) {
    blocks.push(
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '*üî• Key Highlights*'
        }
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: summary.keyHighlights.map(highlight => `‚Ä¢ ${highlight}`).join('\n')
        }
      }
    );
  }

  // Funding and financial news
  if (summary.fundingNews && summary.fundingNews.length > 0) {
    blocks.push(
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '*üí∞ Funding & Financial News*'
        }
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: summary.fundingNews.map(item => `‚Ä¢ ${item}`).join('\n')
        }
      }
    );
  }

  // Product launches
  if (summary.productLaunches && summary.productLaunches.length > 0) {
    blocks.push(
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '*üöÄ Product Launches*'
        }
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: summary.productLaunches.map(item => `‚Ä¢ ${item}`).join('\n')
        }
      }
    );
  }

  // Industry trends
  if (summary.industryTrends && summary.industryTrends.length > 0) {
    blocks.push(
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '*üìà Industry Trends*'
        }
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: summary.industryTrends.map(item => `‚Ä¢ ${item}`).join('\n')
        }
      }
    );
  }

  // Partnerships and deals
  if (summary.partnerships && summary.partnerships.length > 0) {
    blocks.push(
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '*ü§ù Partnerships & Deals*'
        }
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: summary.partnerships.map(item => `‚Ä¢ ${item}`).join('\n')
        }
      }
    );
  }

  // Executive summary or fallback
  const executiveSummary = summary.executiveSummary || summary.summary || 'No additional summary available.';
  if (executiveSummary && executiveSummary !== 'No additional summary available.') {
    blocks.push(
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '*üìã Executive Summary*'
        }
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: executiveSummary
        }
      }
    );
  }

  // Confidence and metadata
  if (summary.confidence) {
    const confidenceEmoji = getConfidenceEmoji(summary.confidence);
    blocks.push({
      type: 'context',
      elements: [
        {
          type: 'mrkdwn',
          text: `${confidenceEmoji} Confidence: ${Math.round(summary.confidence * 100)}% | Generated by AI from ${searchResults.length} sources`
        }
      ]
    });
  }

  // Action buttons
  blocks.push({
    type: 'actions',
    elements: [
      {
        type: 'button',
        text: {
          type: 'plain_text',
          text: 'üîÑ Refresh'
        },
        action_id: 'refresh_summary',
        value: JSON.stringify({ publisher, days })
      },
      {
        type: 'button',
        text: {
          type: 'plain_text',
          text: 'üìä Detailed View'
        },
        action_id: 'detailed_view',
        value: JSON.stringify({ publisher, days, searchResults: searchResults.length })
      }
    ]
  });

  return {
    response_type: 'in_channel',
    text: `üìä ${publisher} Account Summary (${days} days)`,
    blocks: blocks,
    unfurl_links: false,
    unfurl_media: false
  };
}

/**
 * Format error response for Slack
 */
function formatErrorResponse(publisher, error, days = null) {
  const timeframeText = days ? ` (${days} days)` : '';
  
  return {
    response_type: 'ephemeral',
    text: `‚ùå Error generating summary for ${publisher}${timeframeText}`,
    blocks: [
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `‚ùå *Error generating summary for ${publisher}${timeframeText}*`
        }
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `\`${error.message}\``
        }
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '*Suggestions:*\n‚Ä¢ Check if the publisher name is correct\n‚Ä¢ Try increasing the number of days\n‚Ä¢ Verify that content has been processed recently'
        }
      }
    ]
  };
}

/**
 * Format help/usage response
 */
function formatHelpResponse() {
  return {
    response_type: 'ephemeral',
    text: 'üìñ Publisher Digest Assistant Help',
    blocks: [
      {
        type: 'header',
        text: {
          type: 'plain_text',
          text: 'üìñ Publisher Digest Assistant'
        }
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '*Available Commands:*'
        }
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '`/accountsummary <publisher> [days]`\nGenerate an AI-powered summary for a specific publisher\n\n`/mula <publisher> [days]`\nAlias for /accountsummary\n\n`/health`\nCheck system status'
        }
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '*Examples:*\n‚Ä¢ `/accountsummary TechCrunch 7`\n‚Ä¢ `/mula "The Information" 14`\n‚Ä¢ `/accountsummary Variety 30`'
        }
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '*Parameters:*\n‚Ä¢ `publisher` (required): Name of the publisher\n‚Ä¢ `days` (optional): Number of days to analyze (1-365, default: 7)'
        }
      }
    ]
  };
}

/**
 * Format loading/processing response
 */
function formatLoadingResponse(publisher, days) {
  return {
    response_type: 'in_channel',
    text: `üîç Analyzing ${publisher} content from the last ${days} days...`,
    blocks: [
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `üîç *Analyzing ${publisher} content*\n\nSearching through the last ${days} days of content...\n_This may take 15-30 seconds while I process the data._`
        }
      },
      {
        type: 'context',
        elements: [
          {
            type: 'mrkdwn',
            text: '‚è≥ Searching vector database ‚Ä¢ ü§ñ Generating AI summary ‚Ä¢ üìä Formatting results'
          }
        ]
      }
    ]
  };
}

/**
 * Format detailed view response
 */
function formatDetailedResponse(publisher, searchResults, days) {
  const blocks = [
    {
      type: 'header',
      text: {
        type: 'plain_text',
        text: `üìã ${publisher} - Detailed Analysis`
      }
    },
    {
      type: 'section',
      text: {
        type: 'mrkdwn',
        text: `*Timeframe:* ${days} days\n*Total sources:* ${searchResults.length}`
      }
    }
  ];

  // Add top search results
  const topResults = searchResults.slice(0, 5);
  topResults.forEach((result, index) => {
    const score = Math.round(result.score * 100);
    const timestamp = new Date(result.metadata?.timestamp || 0).toLocaleDateString();
    const content = (result.metadata?.content || '').substring(0, 200) + '...';
    
    blocks.push({
      type: 'section',
      text: {
        type: 'mrkdwn',
        text: `*${index + 1}. Source Match (${score}% relevance)*\n${timestamp}\n\`\`\`${content}\`\`\``
      }
    });
  });

  return {
    response_type: 'ephemeral',
    text: `üìã ${publisher} - Detailed Analysis`,
    blocks: blocks
  };
}

/**
 * Get confidence emoji based on score
 */
function getConfidenceEmoji(confidence) {
  if (confidence >= 0.9) return 'üü¢';
  if (confidence >= 0.7) return 'üü°';
  if (confidence >= 0.5) return 'üü†';
  return 'üî¥';
}

/**
 * Truncate text to fit Slack limits
 */
function truncateText(text, maxLength = 3000) {
  if (!text || text.length <= maxLength) {
    return text;
  }
  return text.substring(0, maxLength - 3) + '...';
}

/**
 * Format source attribution
 */
function formatSourceAttribution(searchResults) {
  if (!searchResults || searchResults.length === 0) {
    return 'No sources available';
  }

  const sourceCount = searchResults.length;
  const avgScore = searchResults.reduce((sum, r) => sum + r.score, 0) / sourceCount;
  const dateRange = getDateRange(searchResults);

  return `${sourceCount} sources (avg. relevance: ${Math.round(avgScore * 100)}%) ‚Ä¢ ${dateRange}`;
}

/**
 * Get date range from search results
 */
function getDateRange(searchResults) {
  if (!searchResults || searchResults.length === 0) {
    return 'No date range';
  }

  const dates = searchResults
    .map(r => new Date(r.metadata?.timestamp || 0))
    .filter(d => d.getTime() > 0)
    .sort((a, b) => a - b);

  if (dates.length === 0) {
    return 'No valid dates';
  }

  if (dates.length === 1) {
    return dates[0].toLocaleDateString();
  }

  const earliest = dates[0].toLocaleDateString();
  const latest = dates[dates.length - 1].toLocaleDateString();
  
  return `${earliest} to ${latest}`;
}

module.exports = {
  formatSlackResponse,
  formatErrorResponse,
  formatHelpResponse,
  formatLoadingResponse,
  formatDetailedResponse,
  formatSourceAttribution,
  truncateText,
  getConfidenceEmoji
}; 